// Code generated by MockGen. DO NOT EDIT.
// Source: ./adpu/adpu.go
//
// Generated by this command:
//
//	mockgen -source=./adpu/adpu.go -destination=./adpu/adpu_mock.go -package=adpu
//

// Package adpu is a generated GoMock package.
package adpu

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProtocol is a mock of Protocol interface.
type MockProtocol struct {
	ctrl     *gomock.Controller
	recorder *MockProtocolMockRecorder
}

// MockProtocolMockRecorder is the mock recorder for MockProtocol.
type MockProtocolMockRecorder struct {
	mock *MockProtocol
}

// NewMockProtocol creates a new mock instance.
func NewMockProtocol(ctrl *gomock.Controller) *MockProtocol {
	mock := &MockProtocol{ctrl: ctrl}
	mock.recorder = &MockProtocolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProtocol) EXPECT() *MockProtocolMockRecorder {
	return m.recorder
}

// Exchange mocks base method.
func (m *MockProtocol) Exchange(ctx context.Context, command []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exchange", ctx, command)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exchange indicates an expected call of Exchange.
func (mr *MockProtocolMockRecorder) Exchange(ctx, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockProtocol)(nil).Exchange), ctx, command)
}

// Send mocks base method.
func (m *MockProtocol) Send(ctx context.Context, cla, ins, p1, p2 uint8, data []byte) ([]byte, uint16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, cla, ins, p1, p2, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(uint16)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Send indicates an expected call of Send.
func (mr *MockProtocolMockRecorder) Send(ctx, cla, ins, p1, p2, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProtocol)(nil).Send), ctx, cla, ins, p1, p2, data)
}
