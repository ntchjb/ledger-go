// Code generated by MockGen. DO NOT EDIT.
// Source: ./adpu/serializer.go
//
// Generated by this command:
//
//	mockgen -source=./adpu/serializer.go -destination=./adpu/serializer_mock.go -package=adpu
//

// Package adpu is a generated GoMock package.
package adpu

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMarshaler is a mock of Marshaler interface.
type MockMarshaler struct {
	ctrl     *gomock.Controller
	recorder *MockMarshalerMockRecorder
}

// MockMarshalerMockRecorder is the mock recorder for MockMarshaler.
type MockMarshalerMockRecorder struct {
	mock *MockMarshaler
}

// NewMockMarshaler creates a new mock instance.
func NewMockMarshaler(ctrl *gomock.Controller) *MockMarshaler {
	mock := &MockMarshaler{ctrl: ctrl}
	mock.recorder = &MockMarshalerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarshaler) EXPECT() *MockMarshalerMockRecorder {
	return m.recorder
}

// MarshalADPU mocks base method.
func (m *MockMarshaler) MarshalADPU() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalADPU")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalADPU indicates an expected call of MarshalADPU.
func (mr *MockMarshalerMockRecorder) MarshalADPU() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalADPU", reflect.TypeOf((*MockMarshaler)(nil).MarshalADPU))
}

// MockUnmarshaler is a mock of Unmarshaler interface.
type MockUnmarshaler struct {
	ctrl     *gomock.Controller
	recorder *MockUnmarshalerMockRecorder
}

// MockUnmarshalerMockRecorder is the mock recorder for MockUnmarshaler.
type MockUnmarshalerMockRecorder struct {
	mock *MockUnmarshaler
}

// NewMockUnmarshaler creates a new mock instance.
func NewMockUnmarshaler(ctrl *gomock.Controller) *MockUnmarshaler {
	mock := &MockUnmarshaler{ctrl: ctrl}
	mock.recorder = &MockUnmarshalerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnmarshaler) EXPECT() *MockUnmarshalerMockRecorder {
	return m.recorder
}

// UnmarshalADPU mocks base method.
func (m *MockUnmarshaler) UnmarshalADPU(data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalADPU", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalADPU indicates an expected call of UnmarshalADPU.
func (mr *MockUnmarshalerMockRecorder) UnmarshalADPU(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalADPU", reflect.TypeOf((*MockUnmarshaler)(nil).UnmarshalADPU), data)
}
